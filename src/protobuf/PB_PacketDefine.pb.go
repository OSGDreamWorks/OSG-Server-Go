// Code generated by protoc-gen-go.
// source: PB_PacketDefine.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	PB_PacketDefine.proto

It has these top-level messages:
*/
package protobuf

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type CL_Protocol int32

const (
	CL_Protocol_eCL_PacketBegin CL_Protocol = 10000
	// ----------------------------
	CL_Protocol_eCL_Connected    CL_Protocol = 10000
	CL_Protocol_eCL_Disconnected CL_Protocol = 10001
	CL_Protocol_eCL_CheckAccount CL_Protocol = 10002
	// ----------------------------
	CL_Protocol_eCL_PacketEnd CL_Protocol = 10500
)

var CL_Protocol_name = map[int32]string{
	10000: "eCL_PacketBegin",
	// Duplicate value: 10000: "eCL_Connected",
	10001: "eCL_Disconnected",
	10002: "eCL_CheckAccount",
	10500: "eCL_PacketEnd",
}
var CL_Protocol_value = map[string]int32{
	"eCL_PacketBegin":  10000,
	"eCL_Connected":    10000,
	"eCL_Disconnected": 10001,
	"eCL_CheckAccount": 10002,
	"eCL_PacketEnd":    10500,
}

func (x CL_Protocol) Enum() *CL_Protocol {
	p := new(CL_Protocol)
	*p = x
	return p
}
func (x CL_Protocol) String() string {
	return proto.EnumName(CL_Protocol_name, int32(x))
}
func (x CL_Protocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *CL_Protocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CL_Protocol_value, data, "CL_Protocol")
	if err != nil {
		return err
	}
	*x = CL_Protocol(value)
	return nil
}

type LC_Protocol int32

const (
	LC_Protocol_eLC_PacketBegin LC_Protocol = 10500
	// ----------------------------
	LC_Protocol_eLC_Connected          LC_Protocol = 10500
	LC_Protocol_eLC_Disconnected       LC_Protocol = 10501
	LC_Protocol_eLC_CheckAccountResult LC_Protocol = 10502
	// ----------------------------
	LC_Protocol_eLC_PacketEnd LC_Protocol = 11000
)

var LC_Protocol_name = map[int32]string{
	10500: "eLC_PacketBegin",
	// Duplicate value: 10500: "eLC_Connected",
	10501: "eLC_Disconnected",
	10502: "eLC_CheckAccountResult",
	11000: "eLC_PacketEnd",
}
var LC_Protocol_value = map[string]int32{
	"eLC_PacketBegin":        10500,
	"eLC_Connected":          10500,
	"eLC_Disconnected":       10501,
	"eLC_CheckAccountResult": 10502,
	"eLC_PacketEnd":          11000,
}

func (x LC_Protocol) Enum() *LC_Protocol {
	p := new(LC_Protocol)
	*p = x
	return p
}
func (x LC_Protocol) String() string {
	return proto.EnumName(LC_Protocol_name, int32(x))
}
func (x LC_Protocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *LC_Protocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LC_Protocol_value, data, "LC_Protocol")
	if err != nil {
		return err
	}
	*x = LC_Protocol(value)
	return nil
}

type CS_Protocol int32

const (
	CS_Protocol_eCS_PacketBegin CS_Protocol = 20000
	// ----------------------------
	CS_Protocol_eCS_Connected    CS_Protocol = 20000
	CS_Protocol_eCS_Disconnected CS_Protocol = 20001
	CS_Protocol_eCS_CheckSession CS_Protocol = 20002
	CS_Protocol_eCS_Ping         CS_Protocol = 20003
	// Begin ClientScene & BattleScene
	CS_Protocol_eCS_LeaveClientScene CS_Protocol = 21000
	CS_Protocol_eCS_EnterFight       CS_Protocol = 21001
	CS_Protocol_eCS_LeaveFight       CS_Protocol = 21002
	CS_Protocol_eCS_BattleRoundInfo  CS_Protocol = 21003
	// ----------------------------
	CS_Protocol_eCS_PacketEnd CS_Protocol = 30000
)

var CS_Protocol_name = map[int32]string{
	20000: "eCS_PacketBegin",
	// Duplicate value: 20000: "eCS_Connected",
	20001: "eCS_Disconnected",
	20002: "eCS_CheckSession",
	20003: "eCS_Ping",
	21000: "eCS_LeaveClientScene",
	21001: "eCS_EnterFight",
	21002: "eCS_LeaveFight",
	21003: "eCS_BattleRoundInfo",
	30000: "eCS_PacketEnd",
}
var CS_Protocol_value = map[string]int32{
	"eCS_PacketBegin":      20000,
	"eCS_Connected":        20000,
	"eCS_Disconnected":     20001,
	"eCS_CheckSession":     20002,
	"eCS_Ping":             20003,
	"eCS_LeaveClientScene": 21000,
	"eCS_EnterFight":       21001,
	"eCS_LeaveFight":       21002,
	"eCS_BattleRoundInfo":  21003,
	"eCS_PacketEnd":        30000,
}

func (x CS_Protocol) Enum() *CS_Protocol {
	p := new(CS_Protocol)
	*p = x
	return p
}
func (x CS_Protocol) String() string {
	return proto.EnumName(CS_Protocol_name, int32(x))
}
func (x CS_Protocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *CS_Protocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CS_Protocol_value, data, "CS_Protocol")
	if err != nil {
		return err
	}
	*x = CS_Protocol(value)
	return nil
}

type SC_Protocol int32

const (
	SC_Protocol_eSC_PacketBegin SC_Protocol = 30000
	// ----------------------------
	SC_Protocol_eSC_Connected          SC_Protocol = 30000
	SC_Protocol_eSC_Disconnected       SC_Protocol = 30001
	SC_Protocol_eSC_CheckSessionResult SC_Protocol = 30002
	SC_Protocol_eCS_PingResult         SC_Protocol = 30003
	// Begin ClientScene & BattleScene
	SC_Protocol_eSC_EnterClientScene  SC_Protocol = 31000
	SC_Protocol_eSC_BattleRoundInfo   SC_Protocol = 31001
	SC_Protocol_eSC_BattleData        SC_Protocol = 31002
	SC_Protocol_eSC_BattleResult      SC_Protocol = 31003
	SC_Protocol_eSC_BattleSceneResult SC_Protocol = 31004
	// ----------------------------
	SC_Protocol_eSC_PacketEnd SC_Protocol = 40000
)

var SC_Protocol_name = map[int32]string{
	30000: "eSC_PacketBegin",
	// Duplicate value: 30000: "eSC_Connected",
	30001: "eSC_Disconnected",
	30002: "eSC_CheckSessionResult",
	30003: "eCS_PingResult",
	31000: "eSC_EnterClientScene",
	31001: "eSC_BattleRoundInfo",
	31002: "eSC_BattleData",
	31003: "eSC_BattleResult",
	31004: "eSC_BattleSceneResult",
	40000: "eSC_PacketEnd",
}
var SC_Protocol_value = map[string]int32{
	"eSC_PacketBegin":        30000,
	"eSC_Connected":          30000,
	"eSC_Disconnected":       30001,
	"eSC_CheckSessionResult": 30002,
	"eCS_PingResult":         30003,
	"eSC_EnterClientScene":   31000,
	"eSC_BattleRoundInfo":    31001,
	"eSC_BattleData":         31002,
	"eSC_BattleResult":       31003,
	"eSC_BattleSceneResult":  31004,
	"eSC_PacketEnd":          40000,
}

func (x SC_Protocol) Enum() *SC_Protocol {
	p := new(SC_Protocol)
	*p = x
	return p
}
func (x SC_Protocol) String() string {
	return proto.EnumName(SC_Protocol_name, int32(x))
}
func (x SC_Protocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *SC_Protocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SC_Protocol_value, data, "SC_Protocol")
	if err != nil {
		return err
	}
	*x = SC_Protocol(value)
	return nil
}

func init() {
	proto.RegisterEnum("protobuf.CL_Protocol", CL_Protocol_name, CL_Protocol_value)
	proto.RegisterEnum("protobuf.LC_Protocol", LC_Protocol_name, LC_Protocol_value)
	proto.RegisterEnum("protobuf.CS_Protocol", CS_Protocol_name, CS_Protocol_value)
	proto.RegisterEnum("protobuf.SC_Protocol", SC_Protocol_name, SC_Protocol_value)
}
