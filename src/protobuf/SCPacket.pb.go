// Code generated by protoc-gen-go.
// source: SCPacket.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	SCPacket.proto

It has these top-level messages:
	SC_CheckSessionResult
	SC_PingResult
	CS_LeaveClientScene
	SC_EnterClientScene
	SC_ExitClientScene
	SC_BattleRoundInfo
	SC_BattleData
	SC_BattleSceneResult
*/
package protobuf

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// discarding unused import protobuf1 "PB_PacketDefine.pb"
//import protobuf2 "XShare_Logic.pb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type SC_CheckSessionResult_Result int32

const (
	SC_CheckSessionResult_OK           SC_CheckSessionResult_Result = 1
	SC_CheckSessionResult_SERVERERROR  SC_CheckSessionResult_Result = 2
	SC_CheckSessionResult_USERNOTFOUND SC_CheckSessionResult_Result = 3
	SC_CheckSessionResult_AUTH_FAILED  SC_CheckSessionResult_Result = 4
	SC_CheckSessionResult_ISONFIRE     SC_CheckSessionResult_Result = 5
)

var SC_CheckSessionResult_Result_name = map[int32]string{
	1: "OK",
	2: "SERVERERROR",
	3: "USERNOTFOUND",
	4: "AUTH_FAILED",
	5: "ISONFIRE",
}
var SC_CheckSessionResult_Result_value = map[string]int32{
	"OK":           1,
	"SERVERERROR":  2,
	"USERNOTFOUND": 3,
	"AUTH_FAILED":  4,
	"ISONFIRE":     5,
}

func (x SC_CheckSessionResult_Result) Enum() *SC_CheckSessionResult_Result {
	p := new(SC_CheckSessionResult_Result)
	*p = x
	return p
}
func (x SC_CheckSessionResult_Result) String() string {
	return proto.EnumName(SC_CheckSessionResult_Result_name, int32(x))
}
func (x SC_CheckSessionResult_Result) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *SC_CheckSessionResult_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SC_CheckSessionResult_Result_value, data, "SC_CheckSessionResult_Result")
	if err != nil {
		return err
	}
	*x = SC_CheckSessionResult_Result(value)
	return nil
}

// --4>: 战斗阵营; 只能有左右双方, 如果增加, 逻辑部分需要修改
type SC_BattleSceneResult_EBattleGroupType int32

const (
	SC_BattleSceneResult_eBattleGroup_Invalid SC_BattleSceneResult_EBattleGroupType = -1
	SC_BattleSceneResult_eBattleGroup_Begin   SC_BattleSceneResult_EBattleGroupType = 1
	SC_BattleSceneResult_eBattleGroup_Left    SC_BattleSceneResult_EBattleGroupType = 1
	SC_BattleSceneResult_eBattleGroup_Right   SC_BattleSceneResult_EBattleGroupType = 2
	SC_BattleSceneResult_eBattleGroup_End     SC_BattleSceneResult_EBattleGroupType = 3
)

var SC_BattleSceneResult_EBattleGroupType_name = map[int32]string{
	-1: "eBattleGroup_Invalid",
	1:  "eBattleGroup_Begin",
	// Duplicate value: 1: "eBattleGroup_Left",
	2: "eBattleGroup_Right",
	3: "eBattleGroup_End",
}
var SC_BattleSceneResult_EBattleGroupType_value = map[string]int32{
	"eBattleGroup_Invalid": -1,
	"eBattleGroup_Begin":   1,
	"eBattleGroup_Left":    1,
	"eBattleGroup_Right":   2,
	"eBattleGroup_End":     3,
}

func (x SC_BattleSceneResult_EBattleGroupType) Enum() *SC_BattleSceneResult_EBattleGroupType {
	p := new(SC_BattleSceneResult_EBattleGroupType)
	*p = x
	return p
}
func (x SC_BattleSceneResult_EBattleGroupType) String() string {
	return proto.EnumName(SC_BattleSceneResult_EBattleGroupType_name, int32(x))
}
func (x SC_BattleSceneResult_EBattleGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *SC_BattleSceneResult_EBattleGroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SC_BattleSceneResult_EBattleGroupType_value, data, "SC_BattleSceneResult_EBattleGroupType")
	if err != nil {
		return err
	}
	*x = SC_BattleSceneResult_EBattleGroupType(value)
	return nil
}

// 每次回合战斗结果
type SC_BattleSceneResult_EBattleResultFlag int32

const (
	SC_BattleSceneResult_ebrf_Begin SC_BattleSceneResult_EBattleResultFlag = 1
	SC_BattleSceneResult_ebrf_Win1  SC_BattleSceneResult_EBattleResultFlag = 1
	SC_BattleSceneResult_ebrf_Win2  SC_BattleSceneResult_EBattleResultFlag = 2
	SC_BattleSceneResult_ebrf_Win3  SC_BattleSceneResult_EBattleResultFlag = 3
	SC_BattleSceneResult_ebrf_Win4  SC_BattleSceneResult_EBattleResultFlag = 4
	SC_BattleSceneResult_ebrf_Lose1 SC_BattleSceneResult_EBattleResultFlag = 5
	SC_BattleSceneResult_ebrf_Lose2 SC_BattleSceneResult_EBattleResultFlag = 6
	SC_BattleSceneResult_ebrf_Lose3 SC_BattleSceneResult_EBattleResultFlag = 7
	SC_BattleSceneResult_ebrf_Lose4 SC_BattleSceneResult_EBattleResultFlag = 8
	SC_BattleSceneResult_ebrf_End   SC_BattleSceneResult_EBattleResultFlag = 9
)

var SC_BattleSceneResult_EBattleResultFlag_name = map[int32]string{
	1: "ebrf_Begin",
	// Duplicate value: 1: "ebrf_Win1",
	2: "ebrf_Win2",
	3: "ebrf_Win3",
	4: "ebrf_Win4",
	5: "ebrf_Lose1",
	6: "ebrf_Lose2",
	7: "ebrf_Lose3",
	8: "ebrf_Lose4",
	9: "ebrf_End",
}
var SC_BattleSceneResult_EBattleResultFlag_value = map[string]int32{
	"ebrf_Begin": 1,
	"ebrf_Win1":  1,
	"ebrf_Win2":  2,
	"ebrf_Win3":  3,
	"ebrf_Win4":  4,
	"ebrf_Lose1": 5,
	"ebrf_Lose2": 6,
	"ebrf_Lose3": 7,
	"ebrf_Lose4": 8,
	"ebrf_End":   9,
}

func (x SC_BattleSceneResult_EBattleResultFlag) Enum() *SC_BattleSceneResult_EBattleResultFlag {
	p := new(SC_BattleSceneResult_EBattleResultFlag)
	*p = x
	return p
}
func (x SC_BattleSceneResult_EBattleResultFlag) String() string {
	return proto.EnumName(SC_BattleSceneResult_EBattleResultFlag_name, int32(x))
}
func (x SC_BattleSceneResult_EBattleResultFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *SC_BattleSceneResult_EBattleResultFlag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SC_BattleSceneResult_EBattleResultFlag_value, data, "SC_BattleSceneResult_EBattleResultFlag")
	if err != nil {
		return err
	}
	*x = SC_BattleSceneResult_EBattleResultFlag(value)
	return nil
}

type SC_CheckSessionResult struct {
	Result           *SC_CheckSessionResult_Result `protobuf:"varint,1,req,name=result,enum=protobuf.SC_CheckSessionResult_Result" json:"result,omitempty"`
	ServerTime       *uint32                       `protobuf:"varint,2,opt,name=server_time" json:"server_time,omitempty"`
	Errmsg           *string                       `protobuf:"bytes,3,opt,name=errmsg" json:"errmsg,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *SC_CheckSessionResult) Reset()         { *m = SC_CheckSessionResult{} }
func (m *SC_CheckSessionResult) String() string { return proto.CompactTextString(m) }
func (*SC_CheckSessionResult) ProtoMessage()    {}

func (m *SC_CheckSessionResult) GetResult() SC_CheckSessionResult_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return SC_CheckSessionResult_OK
}

func (m *SC_CheckSessionResult) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *SC_CheckSessionResult) GetErrmsg() string {
	if m != nil && m.Errmsg != nil {
		return *m.Errmsg
	}
	return ""
}

func (m *SC_CheckSessionResult) SetResult(value SC_CheckSessionResult_Result) {
	if m != nil {
		m.Result = &value
	}
}

func (m *SC_CheckSessionResult) SetServerTime(value uint32) {
	if m != nil {
		m.ServerTime = &value
	}
}

func (m *SC_CheckSessionResult) SetErrmsg(value string) {
	if m != nil {
		m.Errmsg = &value
	}
}

type SC_PingResult struct {
	ServerTime       *uint32 `protobuf:"varint,1,req,name=server_time" json:"server_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SC_PingResult) Reset()         { *m = SC_PingResult{} }
func (m *SC_PingResult) String() string { return proto.CompactTextString(m) }
func (*SC_PingResult) ProtoMessage()    {}

func (m *SC_PingResult) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *SC_PingResult) SetServerTime(value uint32) {
	if m != nil {
		m.ServerTime = &value
	}
}

type SC_LeaveClientScene struct {
	SceneID          *uint32 `protobuf:"varint,1,req" json:"SceneID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SC_LeaveClientScene) Reset()         { *m = SC_LeaveClientScene{} }
func (m *SC_LeaveClientScene) String() string { return proto.CompactTextString(m) }
func (*SC_LeaveClientScene) ProtoMessage()    {}

func (m *SC_LeaveClientScene) GetSceneID() uint32 {
	if m != nil && m.SceneID != nil {
		return *m.SceneID
	}
	return 0
}

func (m *SC_LeaveClientScene) SetSceneID(value uint32) {
	if m != nil {
		m.SceneID = &value
	}
}

type SC_EnterClientScene struct {
	SceneID          *uint32 `protobuf:"varint,1,req" json:"SceneID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SC_EnterClientScene) Reset()         { *m = SC_EnterClientScene{} }
func (m *SC_EnterClientScene) String() string { return proto.CompactTextString(m) }
func (*SC_EnterClientScene) ProtoMessage()    {}

func (m *SC_EnterClientScene) GetSceneID() uint32 {
	if m != nil && m.SceneID != nil {
		return *m.SceneID
	}
	return 0
}

func (m *SC_EnterClientScene) SetSceneID(value uint32) {
	if m != nil {
		m.SceneID = &value
	}
}

type SC_ExitClientScene struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SC_ExitClientScene) Reset()         { *m = SC_ExitClientScene{} }
func (m *SC_ExitClientScene) String() string { return proto.CompactTextString(m) }
func (*SC_ExitClientScene) ProtoMessage()    {}

type SC_BattleRoundInfo struct {
	RoundId          *uint32               `protobuf:"varint,1,req" json:"RoundId,omitempty"`
	Partner          []*ArmyInfo `protobuf:"bytes,2,rep" json:"Partner,omitempty"`
	Enemy            []*ArmyInfo `protobuf:"bytes,3,rep" json:"Enemy,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *SC_BattleRoundInfo) Reset()         { *m = SC_BattleRoundInfo{} }
func (m *SC_BattleRoundInfo) String() string { return proto.CompactTextString(m) }
func (*SC_BattleRoundInfo) ProtoMessage()    {}

func (m *SC_BattleRoundInfo) GetRoundId() uint32 {
	if m != nil && m.RoundId != nil {
		return *m.RoundId
	}
	return 0
}

func (m *SC_BattleRoundInfo) GetPartner() []*ArmyInfo {
	if m != nil {
		return m.Partner
	}
	return nil
}

func (m *SC_BattleRoundInfo) GetEnemy() []*ArmyInfo {
	if m != nil {
		return m.Enemy
	}
	return nil
}

func (m *SC_BattleRoundInfo) SetRoundId(value uint32) {
	if m != nil {
		m.RoundId = &value
	}
}

func (m *SC_BattleRoundInfo) SetPartner(value []*ArmyInfo) {
	if m != nil {
		m.Partner = value
	}
}

func (m *SC_BattleRoundInfo) SetEnemy(value []*ArmyInfo) {
	if m != nil {
		m.Enemy = value
	}
}

// 总的战斗表现结构
type SC_BattleData struct {
	LeftBloodValue   *uint32                  `protobuf:"varint,1,req" json:"LeftBloodValue,omitempty"`
	RightBloodValue  *uint32                  `protobuf:"varint,2,req" json:"RightBloodValue,omitempty"`
	LeftBattleValue  *uint32                  `protobuf:"varint,3,req" json:"LeftBattleValue,omitempty"`
	RightBattleValue *uint32                  `protobuf:"varint,4,req" json:"RightBattleValue,omitempty"`
	BattleRound      []*BattleRound `protobuf:"bytes,5,rep,name=battleRound" json:"battleRound,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *SC_BattleData) Reset()         { *m = SC_BattleData{} }
func (m *SC_BattleData) String() string { return proto.CompactTextString(m) }
func (*SC_BattleData) ProtoMessage()    {}

func (m *SC_BattleData) GetLeftBloodValue() uint32 {
	if m != nil && m.LeftBloodValue != nil {
		return *m.LeftBloodValue
	}
	return 0
}

func (m *SC_BattleData) GetRightBloodValue() uint32 {
	if m != nil && m.RightBloodValue != nil {
		return *m.RightBloodValue
	}
	return 0
}

func (m *SC_BattleData) GetLeftBattleValue() uint32 {
	if m != nil && m.LeftBattleValue != nil {
		return *m.LeftBattleValue
	}
	return 0
}

func (m *SC_BattleData) GetRightBattleValue() uint32 {
	if m != nil && m.RightBattleValue != nil {
		return *m.RightBattleValue
	}
	return 0
}

func (m *SC_BattleData) GetBattleRound() []*BattleRound {
	if m != nil {
		return m.BattleRound
	}
	return nil
}

func (m *SC_BattleData) SetLeftBloodValue(value uint32) {
	if m != nil {
		m.LeftBloodValue = &value
	}
}

func (m *SC_BattleData) SetRightBloodValue(value uint32) {
	if m != nil {
		m.RightBloodValue = &value
	}
}

func (m *SC_BattleData) SetLeftBattleValue(value uint32) {
	if m != nil {
		m.LeftBattleValue = &value
	}
}

func (m *SC_BattleData) SetRightBattleValue(value uint32) {
	if m != nil {
		m.RightBattleValue = &value
	}
}

func (m *SC_BattleData) SetBattleRound(value []*BattleRound) {
	if m != nil {
		m.BattleRound = value
	}
}

type SC_BattleSceneResult struct {
	Winner           *SC_BattleSceneResult_EBattleGroupType  `protobuf:"varint,1,req,enum=protobuf.SC_BattleSceneResult_EBattleGroupType" json:"Winner,omitempty"`
	Result           *SC_BattleSceneResult_EBattleResultFlag `protobuf:"varint,2,req,enum=protobuf.SC_BattleSceneResult_EBattleResultFlag" json:"Result,omitempty"`
	Exp              *int32                                  `protobuf:"varint,3,req,name=exp" json:"exp,omitempty"`
	Bonus            *BonusInfo                    `protobuf:"bytes,4,opt" json:"Bonus,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *SC_BattleSceneResult) Reset()         { *m = SC_BattleSceneResult{} }
func (m *SC_BattleSceneResult) String() string { return proto.CompactTextString(m) }
func (*SC_BattleSceneResult) ProtoMessage()    {}

func (m *SC_BattleSceneResult) GetWinner() SC_BattleSceneResult_EBattleGroupType {
	if m != nil && m.Winner != nil {
		return *m.Winner
	}
	return SC_BattleSceneResult_eBattleGroup_Invalid
}

func (m *SC_BattleSceneResult) GetResult() SC_BattleSceneResult_EBattleResultFlag {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return SC_BattleSceneResult_ebrf_Begin
}

func (m *SC_BattleSceneResult) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *SC_BattleSceneResult) GetBonus() *BonusInfo {
	if m != nil {
		return m.Bonus
	}
	return nil
}

func (m *SC_BattleSceneResult) SetWinner(value SC_BattleSceneResult_EBattleGroupType) {
	if m != nil {
		m.Winner = &value
	}
}

func (m *SC_BattleSceneResult) SetResult(value SC_BattleSceneResult_EBattleResultFlag) {
	if m != nil {
		m.Result = &value
	}
}

func (m *SC_BattleSceneResult) SetExp(value int32) {
	if m != nil {
		m.Exp = &value
	}
}

func (m *SC_BattleSceneResult) SetBonus(value *BonusInfo) {
	if m != nil {
		m.Bonus = value
	}
}

func init() {
	proto.RegisterEnum("protobuf.SC_CheckSessionResult_Result", SC_CheckSessionResult_Result_name, SC_CheckSessionResult_Result_value)
	proto.RegisterEnum("protobuf.SC_BattleSceneResult_EBattleGroupType", SC_BattleSceneResult_EBattleGroupType_name, SC_BattleSceneResult_EBattleGroupType_value)
	proto.RegisterEnum("protobuf.SC_BattleSceneResult_EBattleResultFlag", SC_BattleSceneResult_EBattleResultFlag_name, SC_BattleSceneResult_EBattleResultFlag_value)
}
